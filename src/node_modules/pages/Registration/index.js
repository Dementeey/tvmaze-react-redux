import React, {Component, Fragment} from 'react';
import FormRegistration from 'components/FormRegistration'
import myHistory from 'myHistory';
import is from 'is_js';

export default class extends Component {
  state = {
    firstName: '',
    lastName: '',
    email: '',
    userName: '',
    password: '',
    birthday: '',
    phone: '',
    radioMale: true,
    radioFemale: false,
    select: '',

    errorFirstName: '',
    errorLastName: '',
    errorEmail: '',
    errorUserName: '',
    errorPassword: '',
    errorBirthday: '',
    errorPhone: '',
    errorRadioMale: '',
    errorRadioFemale: '',
    errorSelect: ''
  };


  userRegister = (obj) => {
    const strObj = JSON.stringify(obj);
    localStorage.setItem('user', strObj);
  };

  submit = (event) => {
    event.preventDefault();
    console.log('submit before')

    if (!this.isFormValid()) return;

    console.log('submit')
    this.userRegister({
      firstName: this.state.firstName,
      lastName: this.state.lastName,
      email: this.state.email,
      userName: this.state.userName,
      password: this.state.password,
      birthday: this.state.birthday,
      phone: this.state.phone,
      radioMale: this.state.radioMale,
      radioFemale: this.state.radioMale,
      select: this.state.select
    });



    localStorage.setItem('login', '1');
    return myHistory.push('/');
  };
//--------------------------------------------- END ---------------------------------------------\\


//-----------------------------------------------------------------------------------------------\\

  changeFirstName = (firstName) => {
    this.setState({firstName});
  };

  changeLastName = (lastName) => {
    this.setState({lastName});
  };

  changeEmail = (email) => {
    this.setState({email});
  };

  changeUserName = (userName) => {
    this.setState({userName});
  };

  changePassword = (password) => {
    this.setState({password});
  };

  changePhone = (phone) => {
    this.setState({phone});
  };

  changeRadioMale = (radioMale) => {
    this.setState({radioMale});
  };

  changeRadioFemale = (radioFemale) => {
    this.setState({radioFemale});
  };

  changeSelect = (select) => {
    this.setState({select});
  };

  changeBirthday = (birthday) => {
    this.setState({birthday});
  };

//--------------------------------------------- END ---------------------------------------------\\



//-----------------------------------------------------------------------------------------------\\
  isFormValid = () => {
    return (
      this.isFormValidFirstName(this.state.firstName)
      && this.isFormValidLastName(this.state.lastName)
      && this.isFormValidEmail(this.state.email)
      && this.isFormValidUserName(this.state.userName)
      && this.isFormValidPassword(this.state.password)
      && this.isFormValidBirthday(this.state.birthday)
      && this.isFormValidPhone(this.state.phone)
    );
  };


  isFormValidFirstName = (firstName) => {

    if (firstName === '') {
      this.setState({errorFirstName: 'The field can not be empty'});
      return false;
    }

    if (firstName.length < 3) {
      this.setState({errorFirstName: 'Line length must be greater than 2'});
      return false;
    }

    this.setState({errorFirstName: ''});
    return true;
  };

  isFormValidLastName = (lastName) => {

    if (lastName === '') {
      this.setState({errorLastName: 'The field can not be empty'});
      return false;
    }

    if (lastName.length < 3) {
      this.setState({errorLastName: 'Line length must be greater than 3'});
      return false;
    }

    this.setState({errorLastName: ''});
    return true;
  };

  isFormValidEmail = (email) => {
    if (email === '') {
      this.setState({errorEmail: 'The field can not be empty'});
      return false;
    }

    if (!is.email(email)) {
      this.setState({errorEmail: 'Field must contain e-mail - example@exp.com'});
      return false;
    }

    this.setState({errorEmail: ''});
    return true;
  };

  isFormValidUserName = (userName) => {
    if (userName === '') {
      this.setState({errorUserName: 'The field can not be empty'});
      return false;
    }

    if (userName.length < 3) {
      this.setState({errorUserName: 'Line length must be greater than 3'});
      return false;
    }

    this.setState({errorUserName: ''});
    return true;
  };

  isFormValidPassword= (password) => {
    if (password === '') {
      this.setState({errorPassword: 'The field can not be empty'});
      return false;
    }

    if (password.length < 6) {
      this.setState({errorPassword: 'Password must contain at least 6 mixed characters'});
      return false;
    }

    if (!/(?=.*[0-9])(?=.*[!@#$%^&*]?)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z!@#$%^&*]{6,}/.test(password))  {
      this.setState({errorPassword: 'Password must mixed characters'});
      return false;
    }

    this.setState({errorPassword: ''});
    return true;
  };

  isFormValidBirthday = (birthday) => {
    if (birthday === '') {
      this.setState({errorBirthday: 'The field can not be empty'});
      return false;
    }

    if (!is.dateString(birthday)) {
      this.setState({errorBirthday: 'The date field must be in this format: "MM/DD/YYYY"'});
      return false;
    }

    this.setState({errorBirthday: ''});
    return true;
  };

  isFormValidPhone = (phone) => {
    if (phone === '') {
      this.setState({errorPhone: 'The field can not be empty'});
      return false;
    }

    if (!/^(\+38)(-[0-9]{3}){2}(-[0-9]{2}){2}$/.test(phone)) {
      this.setState({errorPhone: 'The phone number field must be in this format: "+38-XXX-XXX-XX-XX"'});
      return false;
    }

    this.setState({errorPhone: ''});
    return true;
  };


//--------------------------------------------- END ---------------------------------------------\\



  render() {
    return (
      <Fragment>
        <FormRegistration
          onSubmit={this.submit}
          onFirstName={this.changeFirstName}
          onLastName={this.changeLastName}
          onEmail={this.changeEmail}
          onUserName={this.changeUserName}
          onPassword={this.changePassword}
          onBirthday={this.changeBirthday}
          onPhone={this.changePhone}
          onRadioMale={this.changeRadioMale}
          onRadioFemale={this.changeRadioFemale}
          onSelect={this.changeSelect}

          onErrorFirstName={this.state.errorFirstName}
          onErrorLastName={this.state.errorLastName}
          onErrorEmail={this.state.errorEmail}
          onErrorUserName={this.state.errorUserName}
          onErrorPassword={this.state.errorPassword}
          onErrorBirthday={this.state.errorBirthday}
          onErrorPhone={this.state.errorPhone}
          onErrorRadioMale={this.state.errorRadioMale}
          onErrorRadioFemale={this.state.errorRadioFemale}
          onErrorSelect={this.state.errorSelect}
        />
      </Fragment>
    );
  }
}
